<!--
        This program and the accompanying materials are made available
        under the terms of the Eclipse Public License v1.0 which
         accompanies this distribution, and is available at
          http://www.eclipse.org/legal/epl-v10.html
       
        This build script creates a build directory containing the plugins
        and features to be built, and then kicks off the PDE build process.
        You could just as easily do this from a shell script or cron job.
       
        Also, the script can be run inside the Eclipse IDE by choosing
        Run As -> Ant Build from the context menu. It could obviously be
        run outside of the IDE if you have ANT installed on your path.      
    -->
<project name="com.siemens.ct.pm.build" default="buildFromWorkspace">
	<property file="build.properties" />

	<target name="copyProjectsFromFilesystem">
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}/plugins" />
		<mkdir dir="${buildDirectory}/features" />
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="${sourceDir}">
				<include name="com.siemens.ct.pm*/**" />
				<include name="org.jdesktop.application*/**" />
				<exclude name="com.siemens.ct.pm.build*/**" />
				<exclude name="com.siemens.ct.pm.target*/**" />
				<exclude name="com.siemens.ct.pm.feature*/**" />
			</fileset>
		</copy>
		<copy todir="${buildDirectory}/features">
			<fileset dir="${sourceDir}">
				<include name="com.siemens.ct.pm.feature*/**" />
			</fileset>
		</copy>
		<copy todir="${buildDirectory}/target">
			<fileset dir="${sourceDir}">
				<include name="com.siemens.ct.pm.target/**" />
			</fileset>
		</copy>
	</target>

	<target name="copyProjectsFromWorkspace">
		<antcall target="copyProjectsFromFilesystem">
			<param name="sourceDir" value="../" />
		</antcall>
	</target>

	<target name="pde-build">
		<!-- the sign.storepass property -->
		<property file="c:/keystore/build.properties" />
		<replace file="./build.properties" token="@storepass@" value="${mp3m.storepass}" />
		<echo message="Executing ${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipseLocation}/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/build.xml" />
			<arg value="-Dtimestamp=${timestamp}" />
			<classpath>
				<pathelement location="${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>

		<!--- Do the iPOJO jar manipulation -->
		<property file="${buildDirectory}/product.version" />
		<ipojo input="${buildDirectory}/tmp/pm/plugins/com.siemens.ct.pm.ui.views.treeview.ipojo_${pmVersion}.jar"
			        metadata="${buildDirectory}/plugins/com.siemens.ct.pm.ui.views.treeview.ipojo/metadata.xml" />
		<signjar jar="${buildDirectory}/tmp/pm/plugins/com.siemens.ct.pm.ui.views.treeview.ipojo_${pmVersion}.jar"
			alias="${sign.alias}" keystore="${sign.keystore}" storepass="${mp3m.storepass}"/>

		<!-- restore the build.properties file -->
		<replace file="./build.properties" token="${mp3m.storepass}" value="@storepass@" />
	</target>

	<target name="clean">
		<delete dir="${buildDirectory}" />
	</target>

	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="./svn/svnant.jar;./svn/svnClientAdapter.jar;./svn/svnkit.jar;./svn/ganymede.jar;./svn/svnjavahl.jar" />

	<target name="fetchAllProjectsFromSvn">
		<echo message="Checking out all PM projects" />
		<svn javahl="false" username="anonymous" password="">
			<checkout revision="HEAD" url="https://max-server.myftp.org:444/svn/pm/PM/trunk/pm" destPath="${buildDirectory}/svn" />
		</svn>
		<antcall target="copyProjectsFromFilesystem">
			<param name="sourceDir" value="${buildDirectory}/svn" />
		</antcall>
	</target>

	<target name="buildFromWorkspace" depends="clean,copyProjectsFromWorkspace,pde-build" />

	<target name="buildFromSvn" depends="clean,fetchAllProjectsFromSvn,pde-build" />

	<taskdef name="ipojo" classpath="./ipojo/org.apache.felix.ipojo.ant-1.2.0.jar" classname="org.apache.felix.ipojo.task.IPojoTask" />

	<target name="deployToWebServer">
		<property file="${buildDirectory}/product.version" />

		<delete dir="${webServerResultDir}/download" />
		<copy file="pm-downloads.html" todir="${webServerResultDir}/download" overwrite="true">
			<filterset>
				<filter token="pmVersion" value="${pmVersion}" />
			</filterset>
		</copy>

		<zip destfile="${webServerResultDir}/download/PM-${pmVersion}.zip" basedir="${buildDirectory}/tmp/pm" />
		<replace file="${buildDirectory}/tmp/pm/pm.jnlp" token="1.0.0.qualifier" value="${pmVersion}" />
		<replace file="${buildDirectory}/tmp/pm/pm.jnlp" token="jnlp.codebase" value="${jnlp.codebase}" />

		<delete dir="${webServerResultDir}/webstart" />
		<copy todir="${webServerResultDir}/webstart">
			<fileset dir="${buildDirectory}/tmp/pm" />
		</copy>

		<delete dir="${buildDirectory}/export" />
		<svn javahl="false" username="anonymous" password="">
			<export revision="HEAD" srcPath="${svnSourceDir}" destPath="${buildDirectory}/export/PM" />
		</svn>
		<zip destfile="${buildDirectory}/export/PM-src-${pmVersion}.zip" basedir="${buildDirectory}/export/PM" />
		<copy file="${buildDirectory}/export/PM-src-${pmVersion}.zip" todir="${webServerResultDir}/download" />
	</target>

	<target name="buildAndDeployFromWorkspace" depends="buildFromWorkspace">
		<antcall target="deployToWebServer">
			<param name="svnSourceDir" value="../" />
		</antcall>
	</target>

	<target name="buildAndDeployFromSvn" depends="buildFromSvn">
		<antcall target="deployToWebServer">
			<param name="svnSourceDir" value="${buildDirectory}/svn" />
		</antcall>
	</target>

	<!--
   This target is run on the actual build server.
   Firstly it gets the latest version of theis build project from svn,
   then runs the build.
   -->
	<target name="bootstrapBuildFromSvn">
		<delete dir="c:/temp/pm-build-bootstrap" />
		<svn javahl="false" username="anonymous" password="">
			<checkout revision="HEAD" url="https://max-server.myftp.org:444/svn/pm/PM/trunk/pm/com.siemens.ct.pm.build" destPath="c:/temp/pm-build-bootstrap" />
		</svn>
		<ant antfile="c:/temp/pm-build-bootstrap/build.xml" target="buildAndDeployFromSvn" dir="c:/temp/pm-build-bootstrap" inheritAll="false" />
	</target>
</project>

